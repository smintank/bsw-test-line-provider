volumes:
  db_volume:

services:
  db:
    image: postgres:15
    env_file: .env
    volumes:
      - db_volume:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: "rabbitmq:3.9-management"
    env_file: .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 3s
      retries: 5

  line-provider:
    build: ./line-provider
    env_file: .env
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy

  bet-maker:
    build: ./bet-maker
    env_file: .env
    environment:
      LINE_PROVIDER_HOST: 'line-provider'
      RABBITMQ_HOST: 'rabbitmq'
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      line-provider:
        condition: service_started
    volumes:
      - db_volume:/var/lib/postgresql/data
    restart: unless-stopped

  bet-maker-consumer:
    build: ./bet-maker
    command: [ "python", "-m", "services.rabbitmq_consumer" ]
    env_file: .env
    depends_on:
      rabbitmq:
        condition: service_healthy
      bet-maker:
        condition: service_started
    volumes:
      - db_volume:/var/lib/postgresql/data
    restart: unless-stopped

  nginx:
    build: ./nginx/
    env_file: .env
    ports:
      - ${NGINX_HOST_PORT}:80
    depends_on:
      bet-maker:
        condition: service_healthy
      line-provider:
        condition: service_healthy
    restart: unless-stopped